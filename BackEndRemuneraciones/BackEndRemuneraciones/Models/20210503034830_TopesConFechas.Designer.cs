// <auto-generated />
using System;
using BackEndRemuneraciones.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackEndRemuneraciones.Models
{
    [DbContext(typeof(remuneracionesContext))]
    [Migration("20210503034830_TopesConFechas")]
    partial class TopesConFechas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BackEndRemuneraciones.Models.AFCModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contrato")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("FinanciamientoEmpleado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinanciamientoEmpleador")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("AFCModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.AfpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("DependientesSis")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DependientesTasaAfp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaPrevision")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("IndependientesTasaAfp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreAfp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AfpModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.ApvModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaPrevision")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("MontoTope")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tope")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ApvModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.AsigFamiliarTramo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaPrevision")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TopeCompararConRenta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tramo")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AsigFamiliarTramo");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Autenticacion.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contrasena")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Perfil")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.ComunaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("ComunaModels");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empleado.Condiciones.BeneficiosEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BeneficiosAdicionales")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CantidadDiasAdmin")
                        .HasColumnType("int");

                    b.Property<int>("DiasAddVacaciones")
                        .HasColumnType("int");

                    b.Property<bool>("MantieneLaRentaLiquidaLicencia")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MesesImponiblesRecDesde")
                        .HasColumnType("int");

                    b.Property<int>("MesesImponiblesReconocidos")
                        .HasColumnType("int");

                    b.Property<bool>("PagaLosPrimeros3DiasDeLicencia")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("BeneficiosEmpleado");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empleado.Condiciones.ContratoEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Antiguedad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContratoDesde")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ContratoHasta")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Empleador")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HorasDeJornada")
                        .HasColumnType("int");

                    b.Property<string>("Jefe")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.ToTable("ContratoEmpleado");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empleado.Condiciones.SueldoEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AnticipoPactado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AsignColacion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AsignMovilizacion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CuentaCorriente")
                        .HasColumnType("int");

                    b.Property<string>("FormaPago")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("MontoGratificacion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SueldoBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TipoPago")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("SueldoEmpleado");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empleado.Ficha.Tbempleados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Ciudad")
                        .HasColumnType("int");

                    b.Property<int>("Comuna")
                        .HasColumnType("int");

                    b.Property<int>("ContratoEmpId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EmpresaEmpleadoId")
                        .HasColumnType("int");

                    b.Property<bool>("EstaDisponible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nacionalidad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PrevisionEmpId")
                        .HasColumnType("int");

                    b.Property<string>("Rut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sexo")
                        .HasColumnType("int");

                    b.Property<int>("SueldoEmpId")
                        .HasColumnType("int");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContratoEmpId");

                    b.HasIndex("EmpresaEmpleadoId");

                    b.HasIndex("PrevisionEmpId");

                    b.HasIndex("SueldoEmpId");

                    b.ToTable("Tbempleados");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empleado.Prevision.PrevisionEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AFPId")
                        .HasColumnType("int");

                    b.Property<bool>("AdscribeSeguroCesantia")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CodigoINE")
                        .HasColumnType("int");

                    b.Property<bool>("EsPensionado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsapreId")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoPactadoIsapre")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("TrabajoPesaNomPuesto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TramoAsignFamiliar")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AFPId");

                    b.HasIndex("IsapreId");

                    b.ToTable("PrevisionEmpleado");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empresa.BancoNomina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BancoNomina");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empresa.CajaCompensacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CajaCompensacion");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empresa.CargosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CargosModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empresa.FichaEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BancoPagoNomina")
                        .HasColumnType("int");

                    b.Property<int?>("CajaCompensacion")
                        .HasColumnType("int");

                    b.Property<int>("Comuna")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FormPagoMoviColacion")
                        .HasColumnType("int");

                    b.Property<int>("FormaPagoGratif")
                        .HasColumnType("int");

                    b.Property<string>("Giro")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("MutualPorcentajeDescuento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Principal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RepresentanteLegal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rut")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RutRepresentanteLegal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<int>("TipoEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioEmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("Vigente")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEmpresaId");

                    b.ToTable("FichaEmpresa");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empresa.TipoEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TipoEmpresa");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.IsapreModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("IsapreModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Descuentos.ColeccionDescuentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("ValorCalculo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ColeccionDescuentos");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Descuentos.ColeccionDescuentosEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ColeccionDescuentos_id")
                        .HasColumnType("int");

                    b.Property<int?>("DescuentosId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("TbEmpleado_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DescuentosId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("ColeccionDescuentosEmpleados");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Haberes.CategoriasHaberes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CategoriasHaberes");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Haberes.ColeccionHaberes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Categoria_id")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("ValorCalculo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ColeccionHaberes");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Haberes.ColeccionHaberesEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ColeccionHaberes_id")
                        .HasColumnType("int");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int?>("HaberesId")
                        .HasColumnType("int");

                    b.Property<int>("TbEmpelado_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("HaberesId");

                    b.ToTable("ColeccionHaberesEmpleados");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.HaberesYDescuentosEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<int>("HaberOdescuentoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TipoHoD")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("HaberesYDescuentosEmpleado");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.ImpuestoUnico.ImpuestoUnico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CandidadRebaja")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("FactorExento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("RangoDesde")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RangoHasta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TasaImpuestoEfectivaMaxXtramoRenta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ImpuestoUnico");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.LiquidacionesGeneradas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CargosId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpeladoId")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaLiquidacion")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TotalDescuentos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDescuentosLegales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDescuentosPersonales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalHaberes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalImponibles")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalNoImponibles")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CargosId");

                    b.HasIndex("EmpeladoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("LiquidacionesGeneradas");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Novedades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoNovedad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreNovedad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Novedades");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.ModelosVariables.IMMModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("IMMModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.ModelosVariables.UFModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("UFModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.ModelosVariables.UTMModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("UTMModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.RegionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("RegionModels");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.RentasMinImponibles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreCaso")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TipoTopeMinImp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RentasMinImponibles");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.RentasTopasImpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreTipoRenta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tope_id")
                        .HasColumnType("int");

                    b.Property<decimal>("UFCLP")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("RentasTopasImpModel");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Reportes.LibroRemuneraciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AsigFamiliar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescLegales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DescVariables")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<decimal>("GratLegal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ImpUnico")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtrDescuentosLegales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtrosImp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtrosNoImp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Prevision")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Salud")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SegCesantia")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDescuentos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalHaberes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalImp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalLiquido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalNoImp")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("LibroRemuneraciones");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.TipoContratoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TipoContratoModel");
                });

            modelBuilder.Entity("InstitucionesApvModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("InstitucionesApvModels");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.ComunaModel", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.RegionModel", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empleado.Condiciones.ContratoEmpleado", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empresa.CargosModel", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empleado.Ficha.Tbempleados", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Condiciones.ContratoEmpleado", "ContratoEmp")
                        .WithMany()
                        .HasForeignKey("ContratoEmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndRemuneraciones.Models.Empresa.FichaEmpresa", "EmpresaEmpleado")
                        .WithMany("lstEmpleados")
                        .HasForeignKey("EmpresaEmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Prevision.PrevisionEmpleado", "PrevisionEmp")
                        .WithMany()
                        .HasForeignKey("PrevisionEmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Condiciones.SueldoEmpleado", "SueldoEmp")
                        .WithMany()
                        .HasForeignKey("SueldoEmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empleado.Prevision.PrevisionEmpleado", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.AfpModel", "AFP")
                        .WithMany()
                        .HasForeignKey("AFPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndRemuneraciones.Models.IsapreModel", "Isapre")
                        .WithMany()
                        .HasForeignKey("IsapreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Empresa.FichaEmpresa", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Autenticacion.Usuario", "UsuarioEmpresa")
                        .WithMany("EmpresasUsuario")
                        .HasForeignKey("UsuarioEmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Descuentos.ColeccionDescuentos", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empresa.FichaEmpresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Descuentos.ColeccionDescuentosEmpleado", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Liquidacion.Descuentos.ColeccionDescuentos", "Descuentos")
                        .WithMany()
                        .HasForeignKey("DescuentosId");

                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Ficha.Tbempleados", "Empleado")
                        .WithMany("ListadoDescuentos")
                        .HasForeignKey("EmpleadoId");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Haberes.ColeccionHaberes", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empresa.FichaEmpresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Haberes.ColeccionHaberesEmpleado", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Ficha.Tbempleados", "Empleado")
                        .WithMany("ListadoHaberes")
                        .HasForeignKey("EmpleadoId");

                    b.HasOne("BackEndRemuneraciones.Models.Liquidacion.Haberes.ColeccionHaberes", "Haberes")
                        .WithMany()
                        .HasForeignKey("HaberesId");
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.HaberesYDescuentosEmpleado", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Ficha.Tbempleados", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndRemuneraciones.Models.Empresa.FichaEmpresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.LiquidacionesGeneradas", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empresa.CargosModel", "Cargos")
                        .WithMany()
                        .HasForeignKey("CargosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Ficha.Tbempleados", "Empelado")
                        .WithMany()
                        .HasForeignKey("EmpeladoId");

                    b.HasOne("BackEndRemuneraciones.Models.Empresa.FichaEmpresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Liquidacion.Novedades", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Ficha.Tbempleados", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndRemuneraciones.Models.Reportes.LibroRemuneraciones", b =>
                {
                    b.HasOne("BackEndRemuneraciones.Models.Empleado.Ficha.Tbempleados", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
